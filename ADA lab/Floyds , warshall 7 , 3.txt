Floyds

#include <stdio.h>
#include <limits.h>

#define MAX 10

void floyds(int cost[MAX][MAX], int n) {
    int i, j, k;
    for (k = 0; k < n; k++)
        for (i = 0; i < n; i++)
            for (j = 0; j < n; j++)
                if (i == j)
                    cost[i][j] = 0;
                else
                    cost[i][j] = (cost[i][j] < (cost[i][k] + cost[k][j])) ? cost[i][j] : (cost[i][k] + cost[k][j]);
}

int main() {
    int cost[MAX][MAX];
    int n, i, j;

    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    printf("Enter the cost matrix:\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            scanf("%d", &cost[i][j]);

    floyds(cost, n);

    printf("Transitive closure for the given cost matrix is:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++)
            printf("\t%d", cost[i][j]);
        printf("\n");
    }

    return 0;
}


-------------------------------------------------------------------------------------------------------------------------

Warshall's

#include <stdio.h>

#define MAX 10

void warshall(int graph[MAX][MAX], int n) {
    int i, j, k;
    int transitiveClosure[MAX][MAX];
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            transitiveClosure[i][j] = graph[i][j];

    for (k = 0; k < n; k++) {
        for (i = 0; i < n; i++) {
            for (j = 0; j < n; j++) {
                transitiveClosure[i][j] = transitiveClosure[i][j] || (transitiveClosure[i][k] && transitiveClosure[k][j]);
            }
        }
    }

    printf("Transitive closure of the given graph:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            printf("%d ", transitiveClosure[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int n, i, j;
    int graph[MAX][MAX];

    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    printf("Enter the adjacency matrix:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    warshall(graph, n);

    return 0;
}