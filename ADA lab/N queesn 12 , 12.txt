12. N Queens problem

#include <stdio.h>
#include <stdlib.h>

#define MAX 20

int board[MAX][MAX];

void printSolution(int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%c ", board[i][j] ? 'Q' : '.');
        }
        printf("\n");
    }
    printf("\n");
}

int isSafe(int row, int col, int n) {
    int i, j;
    for (i = 0; i < col; i++) {
        if (board[row][i]) {
            return 0;
        }
    }
    for (i = row, j = col; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j]) {
            return 0;
        }
    }
    for (i = row, j = col; j >= 0 && i < n; i++, j--) {
        if (board[i][j]) {
            return 0;
        }
    }
    return 1;
}

int solveNQUtil(int col, int n) {
    if (col >= n) {
        printSolution(n);
        return 1;
    }
    int res = 0;
    for (int i = 0; i < n; i++) {
        if (isSafe(i, col, n)) {
            board[i][col] = 1;
            res = solveNQUtil(col + 1, n) || res;
            board[i][col] = 0;
        }
    }
    return res;
}

void solveNQ(int n) {
    if (!solveNQUtil(0, n)) {
        printf("Solution does not exist\n");
        return;
    }
}

int main() {
    int n;
    printf("Enter the number of queens: ");
    scanf("%d", &n);
    solveNQ(n);
    return 0;
}