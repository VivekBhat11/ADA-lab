#include <stdio.h>
#include <stdlib.h>
#define MAX 100
struct AdjListNode {
    int dest;
    struct AdjListNode* next;
};
struct AdjList {
    struct AdjListNode *head;
};
struct Graph {
    int V;
    struct AdjList* array;
};
struct AdjListNode* newAdjListNode(int dest) {
    struct AdjListNode* newNode = (struct AdjListNode*) malloc(sizeof(struct AdjListNode));
    newNode->dest = dest;
    newNode->next = NULL;
    return newNode;
}
struct Graph* createGraph(int V) {
    struct Graph* graph = (struct Graph*) malloc(sizeof(struct Graph));
    graph->V = V;

    graph->array = (struct AdjList*) malloc(V * sizeof(struct AdjList));

    for (int i = 0; i < V; ++i)
        graph->array[i].head = NULL;

    return graph;
}
void addEdge(struct Graph* graph, int src, int dest) {
    struct AdjListNode* newNode = newAdjListNode(dest);
    newNode->next = graph->array[src].head;
    graph->array[src].head = newNode;
}
void topologicalSortUtil(int v, int visited[], int* stack, int* stackIndex, struct Graph* graph) {
    visited[v] = 1;
    struct AdjListNode* node = graph->array[v].head;

    while (node != NULL) {
        if (!visited[node->dest])
            topologicalSortUtil(node->dest, visited, stack, stackIndex, graph);
        node = node->next;
    }

    stack[*stackIndex] = v;
    (*stackIndex)++;
}
void topologicalSort(struct Graph* graph) {
    int stack[MAX];
    int stackIndex = 0;
    int visited[MAX] = {0};

    for (int i = 0; i < graph->V; i++) {
        if (visited[i] == 0) {
            topologicalSortUtil(i, visited, stack, &stackIndex, graph);
        }
    }

    for (int i = stackIndex - 1; i >= 0; i--) {
        printf("%d ", stack[i]);
    }
}
int main() {
    int V = 6;
    struct Graph* graph = createGraph(V);
    addEdge(graph, 5, 2);
    addEdge(graph, 5, 0);
    addEdge(graph, 4, 0);
    addEdge(graph, 4, 1);
    addEdge(graph, 2, 3);
    addEdge(graph, 3, 1);

    printf("Topological sorting of the given graph is: \n");
    topologicalSort(graph);

    return 0;
}#include <stdio.h>
#include <stdlib.h>
#define MAX 100
struct AdjListNode {
    int dest;
    struct AdjListNode* next;
};
struct AdjList {
    struct AdjListNode *head;
};
struct Graph {
    int V;
    struct AdjList* array;
};
struct AdjListNode* newAdjListNode(int dest) {
    struct AdjListNode* newNode = (struct AdjListNode*) malloc(sizeof(struct AdjListNode));
    newNode->dest = dest;
    newNode->next = NULL;
    return newNode;
}
struct Graph* createGraph(int V) {
    struct Graph* graph = (struct Graph*) malloc(sizeof(struct Graph));
    graph->V = V;

    graph->array = (struct AdjList*) malloc(V * sizeof(struct AdjList));

    for (int i = 0; i < V; ++i)
        graph->array[i].head = NULL;

    return graph;
}
void addEdge(struct Graph* graph, int src, int dest) {
    struct AdjListNode* newNode = newAdjListNode(dest);
    newNode->next = graph->array[src].head;
    graph->array[src].head = newNode;
}
void topologicalSortUtil(int v, int visited[], int* stack, int* stackIndex, struct Graph* graph) {
    visited[v] = 1;
    struct AdjListNode* node = graph->array[v].head;

    while (node != NULL) {
        if (!visited[node->dest])
            topologicalSortUtil(node->dest, visited, stack, stackIndex, graph);
        node = node->next;
    }

    stack[*stackIndex] = v;
    (*stackIndex)++;
}
void topologicalSort(struct Graph* graph) {
    int stack[MAX];
    int stackIndex = 0;
    int visited[MAX] = {0};

    for (int i = 0; i < graph->V; i++) {
        if (visited[i] == 0) {
            topologicalSortUtil(i, visited, stack, &stackIndex, graph);
        }
    }

    for (int i = stackIndex - 1; i >= 0; i--) {
        printf("%d ", stack[i]);
    }
}
int main() {
    int V = 6;
    struct Graph* graph = createGraph(V);
    addEdge(graph, 5, 2);
    addEdge(graph, 5, 0);
    addEdge(graph, 4, 0);
    addEdge(graph, 4, 1);
    addEdge(graph, 2, 3);
    addEdge(graph, 3, 1);

    printf("Topological sorting of the given graph is: \n");
    topologicalSort(graph);

    return 0;
}