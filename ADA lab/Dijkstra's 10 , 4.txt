4. Dijkstra's

#include <stdio.h>
#define MAX 20
#define INFINITY 9999

int n;
int cost[MAX][MAX];
int distance[MAX];
int visited[MAX];

void readMatrix() {
    printf("Enter the number of vertices: ");
    scanf("%d", &n);
    printf("Enter the cost adjacency matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &cost[i][j]);
            if (cost[i][j] == 0) {
                cost[i][j] = INFINITY;
            }
        }
    }
}

int extractMin() {
    int min = INFINITY, minIndex = -1;
    for (int i = 0; i < n; i++) {
        if (!visited[i] && distance[i] < min) {
            min = distance[i];
            minIndex = i;
        }
    }
    return minIndex;
}

void dijkstra(int startVertex) {
    for (int i = 0; i < n; i++) {
        distance[i] = cost[startVertex][i];
        visited[i] = 0;
    }
    distance[startVertex] = 0;
    visited[startVertex] = 1;

    for (int count = 1; count < n; count++) {
        int u = extractMin();
        visited[u] = 1;

        for (int v = 0; v < n; v++) {
            if (!visited[v] && distance[u] + cost[u][v] < distance[v]) {
                distance[v] = distance[u] + cost[u][v];
            }
        }
    }

    printf("Vertex\tDistance from Source\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\n", i, distance[i]);
    }
}

int main() {
    readMatrix();
    int startVertex;
    printf("Enter starting vertex: ");
    scanf("%d", &startVertex);
    dijkstra(startVertex);
    return 0;
}