Kruskal:

#include <stdio.h>

int i, j, k, a, b, u, v, n, ne = 1;
int min, mincost = 0;

int find(int i, int parent[]) {
    while (parent[i] != 0)
        i = parent[i];
    return i;
}

int uni(int i, int j, int parent[]) {
    if (i != j) {
        parent[j] = i;
        return 1;
    }
    return 0;
}

int main() {
    int cost[10][10];
    int parent[10];
    
    printf("Implementation of Kruskal's algorithm\n");
    printf("Enter the number of vertices: ");
    scanf("%d", &n);
    
    for (i = 1; i <= n; i++)
        parent[i] = 0;
    
    printf("\nEnter the cost adjacency matrix:\n");
    for (i = 1; i <= n; i++) {
        for (j = 1; j <= n; j++) {
            scanf("%d", &cost[i][j]);
            if (cost[i][j] == 0)
                cost[i][j] = 999;
        }
    }
    
    printf("The edges of Minimum Cost Spanning Tree are:\n");
    while (ne < n) {
        min = 999;
        for (i = 1; i <= n; i++) {
            for (j = 1; j <= n; j++) {
                if (cost[i][j] < min) {
                    min = cost[i][j];
                    a = u = i;
                    b = v = j;
                }
            }
        }
        u = find(u, parent);
        v = find(v, parent);
        if (uni(u, v, parent) == 1) {
            printf("Edge (%d, %d) = %d\n", a, b, min);
            ne++;
            mincost += min;
        }
        cost[a][b] = cost[b][a] = 999;
    }
    
    printf("Minimum cost = %d\n", mincost);
    
    return 0;
}